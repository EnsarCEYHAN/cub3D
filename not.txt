void	map_scan(t_data *data)
{
    // 	char	*line;
    // 	char	*tmp;
    // 	char	*map_line;

	data->fd = open(data->map_name, O_RDONLY);
	if (data->fd == -1)
        error(data, "fd error");
	data_init(data);
	// fd_opener(data);
	// map_line = ft_strdup("");
	// if (!map_line)
	// 	error(data, "strdup error");
	// while ((line = get_next_line(data->fd)))
	// {
	// 	tmp = map_line;
	// 	map_line = ft_strjoin(tmp, line);
	// 	if (!map_line)
	// 		return(free(tmp), free(line), error(data, "ft_strjoin Error"), (void)0);
	// 	free(tmp);
	// 	free(line);
	// }
	// if (!(data->map = ft_split(map_line, '\n')))
	// 	error(data, "Split Error");
	// free(map_line);
	// for (size_t i = 0; data->map[i]; i++)
	// {
	// 	printf("%s\n", data->map[i]);
	// }	
}



void	fd_opener(t_data *data)
{
	close(data->fd);
	data->fd = open(data->map_name, O_RDONLY);
	if (data->fd == -1)
        error(data, "fd error");
}



void	map_scan(t_data *data)
{
	data->fd = open(data->map_name, O_RDONLY);
	if (data->fd == -1)
        error(data, "fd error");count--;
	data_init(data);
}

./path_to_the_north_texture
./path_to_the_south_texture
./path_to_the_west_texture
./path_to_the_east_texture
F 220,100,0
C 225,30,0



NAME	:= cub3D

FLAGS	:= -Wall -Wextra -Werror -I/path/minilibx/ #-g
MLXFLAG = -L./minilibx -lmlx -lXext -lX11 -lm
LIBRARY := -Lminilibx -lmlx -framework OpenGL -framework AppKit


CC		:= gcc
RM		:= rm -rf

SRC		:=	main.c\
			map_scan.c\
			utils.c

LIBFT	:= Libft/libft.a
GNL     := GNL/gnl.a
OBJ		:= $(SRC:.cpp=.o)

RED		:= \033[31m
GREEN	:= \033[32m
YELLOW	:= \033[33m
BLUE	:= \033[34m
MAGENTA	:= \033[35m
CYAN	:= \033[36m
RESET	:= \033[0m

CC_MSG		:= @printf "$(CYAN)$(CC)$(RESET) $(YELLOW)$(FLAGS)$(RESET) $(MAGENTA)$(OBJ)$(RESET) -o $(GREEN)$(NAME)$(RESET)\n"
SUCCESS_MSG	:= @printf "$(GREEN)$(NAME) has been compiled$(RESET)\n"
CLEAN_MSG 	:= printf "$(RED)Object files removed$(RESET)\n"
FCLEAN_MSG	:= printf "Executable $(RED)$(NAME)$(RESET) removed\n"
all: $(NAME)

$(NAME): $(OBJ)
	@$(CC) $(FLAGS) $(OBJ) $(LIBFT) $(GNL) $(MLXFLAG) -o $(NAME)
	$(CC_MSG)
	$(SUCCESS_MSG)

%.o: %.cpp
	@$(CC) $(FLAGS) -c $< -o $@

clean:
	@if [ -n "$(wildcard *.o)" ]; then \
		$(RM) $(OBJ); \
		$(CLEAN_MSG); \
	fi

fclean: clean
	@if [ -n "$(wildcard $(NAME))" ]; then \
		$(RM) $(NAME); \
		$(FCLEAN_MSG); \
	fi

re: fclean all

.PHONY: all clean fclean re

// while (argv[1][i] == ' ' || argv[1][i] == '\t')
// 	i += 1;

// i = -1;
// 	while (data->map[++i])
// 		printf("%s\n", data->map[i]);